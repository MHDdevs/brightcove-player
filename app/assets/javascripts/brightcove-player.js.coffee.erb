#= require airbrake-js-client.min
#= require bowser
#= require airbrake

hideOverlay = ->
  $overlay = $('.video-overlay')
  if $overlay.is(':visible')
    window.player.pause()
    $overlay.hide()
  return

initVideoOverlay = (element) ->
  $element = element
  initTime = parseInt($element.attr('data-content-initial-time')) || 0
  statsUrl = $element.data('content-stats-url') || ''

  playerEventHandler = (player) ->
    player.on 'error', ->
      if typeof airbrake != 'undefined'
        airbrake.notify(
          error: 'OoyalaPlayer ' + description
          environment:
            browser: bowser
            url: window.location.href
          context:
            error_type: 'ooyala'
        )

    player.on 'timeupdate', ->
      updatePlayheadSeconds(player)

    return

    # player.mb.subscribe OO.EVENTS.FULLSCREEN_CHANGED, 'fullscreenChanged', (eventName) ->
    #   resizePlayer()
    #   return

    # user's playback position will be saved if they exit or refresh the page.
    # new playheadSeconds value will not be present in the dom upon refresh
    window.onunload = ->
      if statsUrl != ''
        updatePlayheadSeconds(player)
      return
    return

  updatePlayheadSeconds = (player) ->
    if statsUrl == ''
      return

    playheadSeconds = Math.floor(player.currentTime()) || 0

    if !(playheadSeconds%5 == 0) || window.storedPlayheadSeconds == playheadSeconds
      return

    window.storedPlayheadSeconds = playheadSeconds

    el = player.el()
    el.dataset.contentInitialTime = playheadSeconds
    $.ajax
      method: '<%= BrightcovePlayer.stat_method == :patch ? 'PATCH' : 'POST' %>'
      url: statsUrl
      data:
        <%= BrightcovePlayer.stat_model %>: playhead_seconds: playheadSeconds
        playlist_id: Number(el.dataset.mhdPlaylistId);
        page_video_ids: el.dataset.pageVideoIds

  window.player = videojs($element.attr('id'))

  if (bowser.name != 'Internet Explorer' && bowser.name != 'Microsoft Edge' && bowser.name != 'Samsung Internet for Android' )
    player.displayBumpers()

  player.ready ->
    player.currentTime(initTime)
    playerEventHandler(player)
    resizePlayer()
    # player.play()

bindPlayer = ->
  configureBumpers()
  if $('body').css('direction') == 'rtl'
    observer = new MutationObserver((mutations) ->
      i = 0
      while i < mutations.length
        j = 0
        while j < mutations[i].addedNodes.length
          if ~mutations[i].addedNodes[j].id.indexOf('OoyalaPingerIFrame')
            mutations[i].addedNodes[j].style.left = 'auto'
            mutations[i].addedNodes[j].style.right = '-5px'
          if mutations[i].addedNodes[j].getAttribute('data') != null and ~mutations[i].addedNodes[j].getAttribute('data').indexOf('https://uk-mhd.videoplaza.tv/proxy')
            mutations[i].addedNodes[j].style.left = 'auto'
            mutations[i].addedNodes[j].style.right = '-9999px'
            mutations[i].addedNodes[j].style.float = 'right'
          ++j
        ++i
      return
    )
    config =
      attributes: true
      childList: true
      characterData: true
    observer.observe document.body, config

  $('.play-toggle[data-player-id]').click (event) ->
    event.preventDefault()
    event.stopPropagation()
    elementId = $(this).data('player-id')

    if ~elementId.indexOf('question')
      $('html, body').animate { scrollTop: $('#' + elementId).offset().top - 50 }, 2000
    else
      jsPlayerHandler = $('#' + elementId).find('.video-js')
      initVideoOverlay jsPlayerHandler
      $('.video-overlay#' + elementId).fadeToggle 'fast'
      resizePlayer()

      # Disable the Progress Scrubber if data-progress-control = "0"
      if $(this).data("progressControl") == 0
        window.player.controlBar.progressControl.disable()

    return
  $('div.video-overlay').click (event) ->
    if event.target != this
      return
    window.player.pause()
    $(this).hide()
    return
  $('.close-button').click ->
    hideOverlay()
    return
  # Handle ESC key press
  $(document).keyup (event) ->
    if event.keyCode == 27
      hideOverlay()
    return
  return

unbindPlayer = ->
  $('.play-toggle[data-player-id]').off('click')
  $('div.video-overlay').off('click')
  $('.close-button').off('click')
  return

rebindPlayer = ->
  unbindPlayer()
  bindPlayer()
  return

resizePlayer = ->
  height = $(window).height()
  width = height * 16 / 9
  if width > $(window).width()
    width = $(window).width()
  wrapper = $('.ooyala-wrapper:visible')
  wrapper.innerWidth width
  padding = wrapper.outerWidth() - wrapper.width()
  new_height = $('.ooyala-wrapper:visible .video-js').outerWidth() * 9 / 16
  margin = (height - new_height - padding) / 2
  wrapper.css 'margin-top', margin + 'px'
  return

#bumpers plugin

configureBumpers = ->
  if (typeof videojs == 'undefined' )
    return

  videojs.registerPlugin 'displayBumpers', ->
    myPlayer = this
    prev = myPlayer.mediainfo.id
    firstTime = true
    initTime = 0

    myPlayer.on 'ready', ->
      this.play();

    bumperId = (tags = []) ->
      `var bumperId`
      bumperId = null
      bumpers = <%= BrightcovePlayer.bumpers.to_json %>
      filtered = tags.map((w) ->
        e = w.match(/[L,l]esson[\s,_](\d+)/)
        #chack for lessons in tags
        if e != null then e[1] else null
      ).filter(Boolean)

      if filtered.length > 0 and Object.keys(bumpers).indexOf('lesson_' + filtered[0]) != -1
        bumperId = bumpers['lesson_' + filtered[0]]
      else if Object.keys(bumpers).indexOf('default') != -1
        bumperId = bumpers['default']
      else
        bumperId = null
      bumperId

    playVideo = (id, offset=0) ->
      if id == null
        return
      # Get the video for the current randomly selected video Id
      myPlayer.catalog.getVideo id, (error, video) ->
        # Deal with error
        if error
          console.log 'error getting bumper', error
        myPlayer.catalog.load video
        myPlayer.play()
        setTimeout (->
          window.player.currentTime(offset)
          window.player.play()
          return
        ),500
        return
      return

    myPlayer.on 'play', ->
      if firstTime
        initTime = myPlayer.currentTime()
        firstTime = false
        myPlayer.pause()
        myPlayer.controlBar.hide()

        # setTimeout (->
        #   if !adsPlaying
        #     return
        #   firstTime = false
        #   playVideo prev, initTime
        #   return
        # ),8000

        playVideo bumperId(myPlayer.mediainfo.tags)

      return
    # +++  Listen for the ended event and play the next video or bumper +++
    myPlayer.on 'ended', ->
      myPlayer.controlBar.show()
      if myPlayer.mediainfo.id != prev
        playVideo prev, initTime
      return
    return

window.bindPlayer = bindPlayer
window.rebindPlayer = rebindPlayer
window.resizePlayer = resizePlayer

$ ->
  bindPlayer()

$(window).resize ->
  resizePlayer()
